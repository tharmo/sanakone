class name=kotus
  kotustocsv: {: xml to text: all words with tn (skips composites), produces format suitable for finding unique types of words  } 
   xmp
    xse:gawk in="kotus-sanalista_v1.xml" out="kot-wrdx.csv": '''
      BEGIN { FS="[<|>]"}
      /\<tn\>/ { 
         ssta=match($0,"<s>")+3;ssto=match($0,"</s>");tsta=match($0,"<tn>")+4;tsto=match($0,"</tn>");
         asta=match($0,"<av>")+4;asto=match($0,"</av>");   ##!!handle <av astevaihtelu="valinnainen"
         av=substr($0,asta,asto-asta)
          if (av=="") { av="0"}
          
          st=substr($0,ssta,ssto-ssta)
          stlast=substr(st,length(st),1)
          st2last=substr(st,length(st)-1,1)
         tn=sprintf("%03d", substr($0,tsta,tsto-tsta));
         ## if (st=="") {st="XXX"}
         if (st=="hapan") tn="034"
         if (st=="show") next
         if (tn=="049" && substr(st,length(st))=="e") tn="048"
         if (length(av)>2) {
         print tn  "," substr(av,length(av)) "," stlast "," length(st) "," st  
          av="0"sana
          }
         print tn   "," av "," stlast "," length(st) "," st  
       } 

     '''
     
    xse:shellexec: cat kot-wrdx.csv |uniq > kot-wrd.csv {: poistaa samoin taipuvat homonyymit.. ehkä niistä ois iloa jos finwordnettiä kaiveltais??}
    hr
    xmp
     #just words to be fed into hfst
     xse:gawk in="kot-wrd.csv" out="kot4hfstgen.lst":  BEGIN { FS=","} { if (index($5,"-")<1) if (index($5," ")<1) print tolower($5)}
     xse:gawk in="kot-wrd.csv" out="kot4join.lst":  BEGIN { FS=","; OFS=""} { if (index($5,"-")<1) if (index($5," ")<1) print tolower($5), " " $1 $2 $3}
    
  sanaluokat:  analysoi hfst:llä sanat, siivoa  ja yhdistä kotus-taivutusluokkatietoihin (joissa se olis voinut olla valmiiksi)
    xse:shellexec: cat kot4hfstgen.lst  | hfst-proc -a -v  -p /usr/local/share/hfst/fi/fi-analysis.hfst.ol  > hfst.ana
    xmp
        xse:gawk in="hfst.ana" out="sana_lka.lst":  '''  {: poimii perusmuodot kustakin sanaluokasta, tallettaa sana+" "+luokka }
          BEGIN  { FS="/"; OFS=" "} 
          /^\^\-/ { next}
          /^\^/{ 
            $1=substr($1,2)
            for (i=2;i<=NF;i++) { 
               split($i,ss," ")
               if (ss[1]==$1)
                {
                    sub(/\$/,"",ss[2])
                    if (index(ss[2],"Num")==1)
                       if (index(ss[3],"Nom")>0)
                         print $1 ,  ss[2] #  , ss[3], ss[4]
                    if (index(ss[2],"Pron")>0)   #no x tests 
                       print $1 ,  ss[2]  #, ss[3], ss[4]
                      
                    #if (index(ss[2],"Adv")>0)
                    # print $1  , ss[2], ss[3], ss[4] "!"
                   if (ss[2]=="V")
                     if (index(ss[3],"Inf")>0)
                       print $1, ss[2] #, ss[2], ss[3], ss[4]
                   if (ss[2]=="N")
                     if (index(ss[3],"Nom")==1 && index(ss[4],"Sg")==1)
                       print $1, ss[2] # , ss[2], ss[3], ss[4]
                   if (ss[2]=="A")
                     if (index(ss[3],"Pos")==1 && index(ss[4],"Nsoom")==1)
                       print $1, ss[2] #,  ss[3], ss[4]
                   # if (index("ANVAdvInterjAdvNumAbbrAdp",ss[2])<1)
                   #   print $1  ":" ss[2] ";" ss[3], ss[4] , ss[5] , ss[6] 
                   # continue  
               }
            }
          }  
          #END   { for (i in v) print "V:", i, v[i]}
        '''
    ###xse:gawk in=sana_tvt.lst out=taiv.lst: '''  {: add length (to be sorted by in order to get cleaner "paradigm-words for conjugation)}
      { print $0, length($1) } 
    '''   
    xse:shellexec:  export LC_ALL=C;cat sana_lka.lst|sort>s_1.lst; cat kot4join.lst |sort>s_2.lst
    xse:shellexec:  export LC_ALL=C;join -e MISSING -a1 s_1.lst s_2.lst |uniq >kot_lkax.lst {: kotuslista sanaluokan kera  }
    xse:shellexec: export LC_ALL=C;cat kot_lkax.lst |sort --field-separator=' ' -k2 -k3 -k4 -k1 |uniq >sanat.lst  {: sortaa luokan mukaan}
    hr
    xse:gawk in=sanat.lst out=sanoja.tmp: '''
        {  # just pick firsts of a kind 
         ###if ($1=="huti") print "xxxxxxxxxxxxxxxxx" $0
        if (NF<3) next
        if (prev==$2 $3) { 
         if (has2>3) { next} else { has2=has2+1}
        } else has2=0 
        print $2, $3, $1
        prev=$2 $3
        }
       '''    
    xse:shellexec: export LC_ALL=C;cat sanoja.tmp | sort -k3|uniq >sanoja.lst
    #xmp:   {?read('sanoja.lst')}
    hr   
    xmp: INFOT: {?read('sanat.lst')}
    # MUISTA HANKKIUTUA EROON YHDYSSANOISTA, HFST-TULOKSISSA $2 SIS "#"
  paradigms
    pre 
      #xse:gawk in=sanoja.lst out=taivuta.lst: { print}
     xse:gawk in=sanoja.lst out=taiverb.lst: '''
      @include "V.gen"  
      @include "A.gen"  
      @include "N.gen"  
      @include "Pron.gen"  
      @include "Num.gen"  
      // { 
      
       if ($1=="V") { V($3)}
       #if ($2=="A")  A($1)
       #if ($1=="N" && substr($2,1,3)+0<50)  N($3)
       #if ($2=="Pron")  Pron($1)
       #if ($2=="Num")  Num($1)
      }
    '''
    
    hr
    xse:shellexec: cat  taiverb.lst | ./figen >hfstvx.res
    xse:shellexec: grep -Ev "^$" hfstvx.res > hfstv.res

    xse:gawk in=sanoja.lst out=sv.tmp: '''
       { print $3, $1 $2}
    '''   
   
  join   
    xse:shellexec: export LC_ALL=C;cat sv.tmp |grep ' V0'| sed -e 's/ /,/g' | sort --field-separator=',' -k1,1  -s | sed -e 's/,/ /g'>sv2.tmp
    xse:shellexec: join -i -a1 sv2.tmp hfstv.res >hfstvtai.lst
    h1: taivutetus 
    pre: 
        xse:shellexec:  export LC_ALL=C;    cat hfstvtai.lst |sort --field-separator=' ' -k1,1  -s>taiver.tmp
        hr
        #xse:shellexec: head hfst
    h1: ta.lst    
    hr     
    xmp
      xse:gawk in=taiver.tmp out=taiver.lst: '''
            function join(s,e) { r=""; for(i=s;i<=e;i++) r=r $(i);return(r)}   
            //{ if (NF<2) next
              if (prev1==$1) {
                if (prev==join(3,NF-2)) { w=w " /" $(NF-1) } 
              else
              w=w "," $(NF-1)
              prev=join(3,NF-2)
              next
            }
              print onf prev1 w  
              prev1=$1
              prev=join(3,NF-2)
              onf=$2 ","
              w="," $(NF-1)
            }
             
         '''
   
    #xmp: {:tulos: {?read('tai.lst')}
    xse:shellexec: cat taiver.lst | sort > taiver2.lst
    xse:shellexec: iconv -t ISO-8859-1//TRANSLIT -f UTF-8 taiver2.lst >taiverbs.tmp
    xmp     
      xse:shellexec: cat taiverbs.tmp 
  kaikkiverbit
  
      xse:shellexec: iconv -t ISO-8859-1//TRANSLIT -f UTF-8 sanat.lst | grep -a "V[[:space:]]\+" |grep -a -v 09 >verbsall.tmp
      xse:gawk in="verbsall.tmp" out=verbsall.lst: { print substr($3,2,2) "," substr($3,4,1) "," $1} 
       
  taivu  
     #xse:shellexec: {: iconv -t ISO-8859-1//TRANSLIT -f UTF-8} cat taiverbs.tmp >sanatansi.lst
     ###pre:
        xse:shellexec: awk -f lis.awk sanatansi.lst           
     xse:shellexec: ./taivu {/form/w}
  lataasanat  
     xse:shellexec: ./taivu lataasanat
  nommuodot
    pre
      xse:gawk in=muodot.lst: '''
       BEGIN { FS=",";q="\x27"} 
        /:/{ next}
       //{ muodot="const N" $1 ":array[1.." NF-2 "] of ansistring =(";
       for (i=2;i<NF-1;i++) muodot=muodot q $i q ",";print muodot  q $(NF-1) q");"}
     '''  
  listaasijat
    ###pre 
     xse:gawk in=vsijat.csv: '''
       BEGIN { FS=",";} 
       { print $2 "\n" $4;}    
     '''       
    xse:gawk in=vmidosa.lst: '''
       BEGIN { FS=",";q="\x27";print "<ul>"} 
       { print "<li>" NF " ";for (i=1;i<=NF;i++) print i $i}    
    '''       
    ul
     xse:gawk in=sanatansi.lst: '''
       BEGIN { FS=",";q="\x27";print "<ul>";A="1,2,4,09,11,17,18,27,54,63,70,78";
         split(A,AA) 
          for (i in AA) { a=AA[i];print "  (" i,AA[i]+1,")"}
       
       }
       { #if (substr($1,1,4)!=pv) 
        {
            print "<li><b>" $1 "</b>,";
            for (i in AA) { a=AA[i]+2;print $a "," }
         }
       pv=substr($1,1,4)}    
     '''       
    ul
     xse:gawk in=sanatansi.lst: '''
       BEGIN { FS=",";}
       { 
         if (substr($1,1,4)!=pv) {
            print "<li><b>" $1 "</b>,";
            for (i=1;i<=NF;i++) { print i-2 $i "," }
         }
       pv=substr($1,1,4)   
       }     
     '''       
  teeverbikaava   
     xse:to file=vk1.tmp
       xse:from file=verbikaava.html {: http://henrihe.mbnet.fi/tiede/verbikaava.html)
          xse:apply select=//table/tbody/tr/td[2] 
           div: {.}
     xse:gawk in=vk1.tmp out=vk2.tmp: { if (NF==1) print}    
     xse:shellexec: iconv -f ISO-8859-1 -t UTF-8 verbim.lst >vk3.tmp
     xse:shellexec: cat vk3.tmp |./fiana >vk4.tmp 
     #xse:shellexec: cat vk4.tmp |iconv -t ISO-8859-1//TRANSLIT -f UTF-8  |gawk 'BEGIN { FS="/"} { print $1 "/" substr($1,1,5)}' |sort >vk5.tmp
     xse:gawk in=vk4.tmp out=vk5.tmp: '''
       function PR(f) { print "print wrd \"" substr(f,index(f," ")) "\""}
       
       BEGIN { FS="/";print "function V(wrd) { " } 
       /\^/{ for (i=2;i<=NF;i++) PR($i)}
       END { print "}"}
       '''
     xse:shellexec:  cat vk5.tmp|iconv -t ISO-8859-1//TRANSLIT -f UTF-8  |sort >V.gen
     pre: {?read('V.gen')}
       
         #  ;split("Nom,Par,Gen,Ill,All,Abe,Nom,Par,Gen,Ill,All,Ins,Abe",muoto,",");}
       #//{ for (i=1;i<NF;i++) muodot=muodot "'" muoto[i] ", " $i }
  aste
   echo   A ( kk : k ) - B ( pp : p ) - C ( tt : t ) - D ( k : - ) - E ( p : v ) - F ( t : d ) - G ( nk : ng ) - H ( mp : mm ) - I ( lt : ll ) - J ( nt : nn ) - K ( rt : rr ) - L ( k : j ) - M ( k : v )

  vparadigms
    xse:gawk in=sanoja.lst out=taiverb.lst: '''
      @include "V.gen"  
      #@include "A.gen"  
      #@include "N.gen"  
      #@include "Pron.gen"  
      #@include "Num.gen"  
      // { 
       #if ($2=="V") V($1)
       #if ($2=="A")  A($1)
       #if ($1=="N" && substr($2,1,3)+0<50)  N($3)
      if ($1=="V")  V($3)
       #if ($2=="Pron")  Pron($1)
       #if ($2=="Num")  Num($1)
      }
    '''
    
    hr
    xse:shellexec: cat  taiverb.lst | ./figen >hfstvx.res
    xse:shellexec: grep -Ev "^$" hfstvx.res > hfstv.res

    xse:gawk in=sanoja.lst out=s.tmp: '''
       { print $3, $1 $2}
    '''   
  
